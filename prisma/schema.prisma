// schema.prisma
// Prisma docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ---------- AUTH MODELS ----------
//

model User {
  id String @id 
  userName      String    @unique
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]


  location      String?

  bio           String?


  skills                 User_Skill[]

  listedProjects         Project[]          @relation("ProjectListed")
  contributed             Contributor[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

//
// ---------- PROJECT MODELS ----------
//




model Project {
  p_id           Int     @id @default(autoincrement())
  title          String
  description    String?
  max_team_size  Int
  paid           Boolean
  owner_id      String
  owner   User   @relation("ProjectListed", fields: [owner_id], references: [id])
  is_completed  Boolean @default(false)
  created_at    DateTime
  updated_at    DateTime
  contributors   Contributor[]
  required_skills   Project_Skill[]
}


model Contributor {
  contributor_id String
  project_id     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role String

  contributor User    @relation(fields: [contributor_id], references: [id])
  project     Project @relation(fields: [project_id], references: [p_id])

  @@id([contributor_id, project_id])
}



model Skill {
  skill_id Int    @id @default(autoincrement())
  name     String @unique

  users    User_Skill[]
  projects Project_Skill[]
  createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Project_Skill {
  project_id Int
  skill_id   Int

  project Project @relation(fields: [project_id], references: [p_id])
  skill   Skill   @relation(fields: [skill_id], references: [skill_id])
  createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

  @@id([project_id, skill_id])
}

model User_Skill {
  user_id  String
  skill_id Int

  user  User  @relation(fields: [user_id], references: [id])
  skill Skill @relation(fields: [skill_id], references: [skill_id])
  createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

  @@id([user_id, skill_id])
}